Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 cryfs (0.9.6-1) unstable; urgency=medium
 .
   * New upstream version.
   * Compile with the remote update check disabled
Author: David Steele <steele@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2016-10-25

--- cryfs-0.9.6.orig/ChangeLog.txt
+++ cryfs-0.9.6/ChangeLog.txt
@@ -1,3 +1,8 @@
+Version 0.9.7 (unreleased)
+--------------
+Compatibility:
+* Runs on FreeBSD
+
 Version 0.9.6
 ---------------
 Fixed bugs:
--- cryfs-0.9.6.orig/README.md
+++ cryfs-0.9.6/README.md
@@ -90,9 +90,9 @@ Build & Install
         $ sudo make install
 
 You can pass the following variables to the *cmake* command (using *-Dvariablename=value*):
- - -D**CMAKE_BUILD_TYPE**=[Release|Debug]: Whether to run code optimization or add debug symbols. Default: Release
- - -D**BUILD_TESTING**=[on|off]: Whether to build the test cases (can take a long time). Default: off
- - -D**CRYFS_UPDATE_CHECKS**=off: Build a CryFS that doesn't check online for updates and security vulnerabilities.
+ - **-DCMAKE_BUILD_TYPE**=[Release|Debug]: Whether to run code optimization or add debug symbols. Default: Release
+ - **-DBUILD_TESTING**=[on|off]: Whether to build the test cases (can take a long time). Default: off
+ - **-DCRYFS_UPDATE_CHECKS**=off: Build a CryFS that doesn't check online for updates and security vulnerabilities.
 
 Troubleshooting
 ---------------
--- cryfs-0.9.6.orig/src/cpp-utils/system/get_total_memory.cpp
+++ cryfs-0.9.6/src/cpp-utils/system/get_total_memory.cpp
@@ -14,7 +14,7 @@ namespace cpputils{
   if (0 != result) {
     throw std::runtime_error("sysctlbyname syscall failed");
   }
-#elif __linux__
+#elif __linux__ || __FreeBSD__
             long numRAMPages = sysconf(_SC_PHYS_PAGES);
             long pageSize = sysconf(_SC_PAGESIZE);
             mem = numRAMPages * pageSize;
--- cryfs-0.9.6.orig/src/cryfs-cli/Cli.cpp
+++ cryfs-0.9.6/src/cryfs-cli/Cli.cpp
@@ -25,7 +25,6 @@
 #include <cpp-utils/io/NoninteractiveConsole.h>
 #include "Environment.h"
 
-//TODO Fails with gpg-homedir in filesystem: gpg --homedir gpg-homedir --gen-key
 //TODO Many functions accessing the ProgramOptions object. Factor out into class that stores it as a member.
 //TODO Factor out class handling askPassword
 
@@ -71,7 +70,6 @@ using gitversion::VersionCompare;
 //TODO Improve parallelity.
 //TODO Replace ASSERTs with other error handling when it is not a programming error but an environment influence (e.g. a block is missing)
 //TODO Can we improve performance by setting compiler parameter -maes for scrypt?
-//TODO Running nano in a cryfs file system, editing and saving an existing file shows "file was modified since opening".
 
 namespace cryfs {
 
--- cryfs-0.9.6.orig/utils.cmake
+++ cryfs-0.9.6/utils.cmake
@@ -22,9 +22,13 @@ function(target_activate_cpp14 TARGET)
             endif()
         endif(COMPILER_HAS_CPP14_SUPPORT)
     endif("${CMAKE_VERSION}" VERSION_GREATER "3.1")
-    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    # Ideally, we'd like to use libc++ on linux as well, but:
+    #    - http://stackoverflow.com/questions/37096062/get-a-basic-c-program-to-compile-using-clang-on-ubuntu-16
+    #    - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=808086
+    # so only use it on Apple systems...
+    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND APPLE)
         target_compile_options(${TARGET} PUBLIC -stdlib=libc++)
-    endif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    endif(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND APPLE)
 endfunction(target_activate_cpp14)
 
 #################################################
